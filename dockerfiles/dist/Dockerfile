ARG BASE_IMAGE \
    FROM_IMAGE \
    BUILD_DATE \
    VCS_REF \
    VERSION \
    RAILS_ENV="production" \
    BUNDLER_VERSION \
    USER_ID="1001" \
    GROUP_ID="1001" \
    NODE_MAJOR_VERSION
##########################################################################
# STEP 1: BUILDER
##########################################################################
FROM $FROM_IMAGE as builder
ENV RAILS_ENV=${RAILS_ENV:-"production"} \
    NODE_ENV=${RAILS_ENV:-"production"}

# Add run scripts
COPY ./bin $ROOT/bin/
# Copy docker-compose and dockerfile that got
# generated by the update-registry script
COPY ./Dockerfile ./docker-compose.yml $ROOT/

RUN \
  # Check the current environment, if we are in dev or test, 
  # install everything
    npm install \
    && bundle config --local with "$RAILS_ENV" \
    && bundle config --local path "vendor" \
    && bundle config --local clean true \
    && bundle install --jobs "$(nproc)" --no-cache --quiet \
  # Cleanup
    && rm -rf  /usr/local/bundle/* $ROOT/vendor/cache \
    && truncate -s 0 /var/log/*log 

##########################################################################
# STEP 2: Final image
##########################################################################
FROM $BASE_IMAGE
ARG BASE_IMAGE \
    FROM_IMAGE \
    BUILD_DATE \
    VCS_REF \
    VERSION \
    RAILS_ENV="production" \
    BUNDLER_VERSION \
    USER_ID="1001" \
    GROUP_ID="1001" \
    NODE_MAJOR_VERSION

LABEL org.label-schema.build-date=${BUILD_DATE} \
      org.label-schema.name="decidim" \
      org.label-schema.description="Docker image for decidim" \
      org.label-schema.url="https://github.com/decidim/docker" \
      org.label-schema.vcs-ref=${VCS_REF} \
      org.label-schema.vcs-url="https://github.com/decidim/decidim" \
      org.label-schema.vendor="Decidim Community" \
      org.label-schema.version=${VERSION} \
      org.label-schema.schema-version="1.0.0-rc.1" \
      org.opencontainers.image.created=${BUILD_DATE} \
      org.opencontainers.image.title="decidim" \
      org.opencontainers.image.description="Docker image for decidim" \
      org.opencontainers.image.url="https://github.com/decidim/decidim" \
      org.opencontainers.image.revision=${VCS_REF} \
      org.opencontainers.image.source="https://github.com/decidim/decidim" \
      org.opencontainers.image.vendor="Decidim Community" \
      org.opencontainers.image.version=${VERSION} \
      org.opencontainers.image.licenses="GPL-3.0" \
      maintainer="Hadrien Froger <hadrien@octree.ch>"

ENV TERM="xterm" DEBIAN_FRONTEND="noninteractive" DEBIAN_RELEASE="slim-buster" \
    DEBIAN_SUITE="oldstable" ROOT="/home/decidim/app" HOME="/home/decidim/app" BUNDLER_VERSION=${BUNDLER_VERSION} \
    DECIDIM_VERSION=${VERSION} GROUP_ID=${GROUP_ID} USER_ID=${USER_ID} \
    PATH="$PATH:/home/decidim/app/bin" EDITOR="vim" \
    LD_PRELOAD="/usr/lib/x86_64-linux-gnu/libjemalloc.so.2" MALLOC_CONF="dirty_decay_ms:1000,narenas:2,background_thread:true" \
    # Enable Just In Time compiler, if Ruby > 3.2.0
    RUBY_YJIT_ENABLE="1"

# Decidim specifics environments variables
ENV DATABASE_URL="" RAILS_ENV=${RAILS_ENV:-"production"} NODE_ENV=${RAILS_ENV:-"production"} \
    SECRET_KEY_BASE="my_insecure_password" SMTP_ADDRESS="" SMTP_DOMAIN="" SMTP_PASSWORD="" \
    SMTP_USERNAME="" DECIDIM_APPLICATION_NAME="My Application Name" \
    DECIDIM_MAILER_SENDER="change-me@example.org" SMTP_PORT="587" \
    SMTP_STARTTLS_AUTO="true" SMTP_AUTHENTICATION="plain" \
    QUEUE_ADAPTER="sidekiq" SIDEKIQ_CONCURRENCY="5" \
    NODE_MAJOR_VERSION=${NODE_MAJOR_VERSION:-"16"}

ENV STORAGE_PROVIDER="local" STORAGE_CDN_HOST="" AWS_ACCESS_KEY_ID="" \
    AWS_SECRET_ACCESS_KEY="" AWS_BUCKET="" AWS_REGION="" AWS_ENDPOINT="" \
    AZURE_STORAGE_ACCESS_KEY="" AZURE_STORAGE_ACCOUNT_NAME="" AZURE_CONTAINER="" \
    GCS_PROJECT="" GCS_BUCKET="" GCS_TYPE="service_account" \
    GCS_PROJECT_ID="" GCS_PRIVATE_KEY_ID="" GCS_PRIVATE_KEY="" \
    GCS_CLIENT_EMAIL="" GCS_CLIENT_ID="" \
    GCS_AUTH_URI="https://accounts.google.com/o/oauth2/auth" \
    GCS_TOKEN_URI="https://accounts.google.com/o/oauth2/token" \
    GCS_AUTH_PROVIDER_X509_CERT_URL="https://www.googleapis.com/oauth2/v1/certs" \
    GCS_CLIENT_X509_CERT_URL=""

ENV MAPS_PROVIDER="" MAPS_API_KEY="" \
    MAPS_DYNAMIC_URL="" MAPS_STATIC_URL="https://image.maps.ls.hereapi.com/mia/1.6/mapview" \
    MAPS_ATTRIBUTION="" MAPS_EXTRA_VARS="" MAPS_GEOCODING_HOST="" \
    MAPS_DYNAMIC_PROVIDER="" MAPS_STATIC_PROVIDER="" MAPS_STATIC_API_KEY="" \
    MAPS_DYNAMIC_API_KEY="" ETHERPAD_SERVER="" ETHERPAD_API_KEY="" \
    ETHERPAD_API_VERSION="1.2.1" OMNIAUTH_FACEBOOK_APP_ID="" \
    OMNIAUTH_FACEBOOK_APP_SECRET="" OMNIAUTH_GOOGLE_CLIENT_ID="" \
    OMNIAUTH_GOOGLE_CLIENT_SECRET="" OMNIAUTH_TWITTER_API_KEY="" \
    OMNIAUTH_TWITTER_API_SECRET="" BULLETIN_BOARD_SERVER="" \
    BULLETIN_BOARD_PUBLIC_KEY="" BULLETIN_BOARD_API_KEY=""

WORKDIR $ROOT

RUN \
  # Prepare apt-get 
    apt-get upgrade -yq \
    && apt-get update -yq \
  # Prepare node installation
    && apt-get install -yq ca-certificates curl gnupg \
    && mkdir -p /etc/apt/keyrings \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR_VERSION.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list \
    && apt-get update -yq \
  # Install native dependancies
    && apt-get install -yq --no-install-recommends \
      build-essential \
      tzdata \
      imagemagick \
      nodejs \
      # Vim the editor
      vim \
      # Cron... to run cron
      cron \
      # Git to fetch gemfile from git.
      git-core \
      # Alternative malloc implementation
      libjemalloc2 \
  # Re-install yarn on the newer version.
  # needed to pre-compile assets
    && npm install -g yarn --force \
  # Install bundler
    && gem install bundler -v $BUNDLER_VERSION \
  # Clean installation files
    && apt-get clean \
    && apt-get autoremove -y \
    && rm -rf /usr/local/bundle/cache \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/doc /usr/share/man \
    && for x in `gem list --no-versions`; do gem uninstall $x -a -x -I; done \
  # Add a non-root user
    && groupadd -g $GROUP_ID decidim \
    && useradd -u $USER_ID -g $GROUP_ID -r -s /bin/sh decidim 

# Templates used by our `45_template` docker-entrypoint script. 
COPY ./templates /usr/local/share/decidim/templates
# Add all the docker-entrypoints scripts (docker-entrypoint is a run-part).
COPY --chown=decidim ./docker-entrypoint.d /usr/local/share/docker-entrypoint.d
# Copy cron files
COPY ./crontab.d /etc/crontab.d
# Copy ImageMagick policy, to secure imagemagick installation
COPY ./imagetragick.xml /var/imagetragick.xml
# Copy application
COPY --from=builder --chown=decidim $ROOT $ROOT
# Add docker-entrypoint and wait-for-it binaries
COPY --chown=decidim ./bin $ROOT/bin/
# Add libpq-dev files to connect to postgres
COPY --from=builder /usr/lib/x86_64-linux-gnu/ /usr/lib/x86_64-linux-gnu/

RUN \
  # Enforce directory structure
    mkdir -p tmp/pids log \
    && chown -R decidim:decidim $ROOT/tmp $ROOT/log \
    && touch /etc/motd /var/run/crond.pid \
  # Add imagemagick's policy to avoid 
  #   CVE-2016-3714
  #   CVE-2016-3718 - SSRF
  #   CVE-2016-3716
  #   CVE-2016-3717
  # There is no simple way to get the policy.xml path, so we need some magics:
    && IMAGEMAGIC_POLICY=$(convert -list policy | grep Path: | awk '{print $2}' | head -n 1) && mv /var/imagetragick.xml $IMAGEMAGIC_POLICY \
  # Allow motd to be written by our docker-entrypoint script
    && chown -R decidim:decidim /etc/motd \
  # Setup crontab (need to run image as root)
    && crontab /etc/crontab.d/crontab \
  # Symlink logs to a common linux place
    && ln -s $ROOT/log /var/log/decidim \
    && truncate -s 0 /var/log/*log

ENTRYPOINT ["docker-entrypoint"]
CMD ["bundle", "exec", "puma"]
